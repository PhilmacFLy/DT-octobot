C166 COMPILER V7.05, ADC0                                                                  12/12/2013 14:35:01 PAGE 1   


C166 COMPILER V7.05, COMPILATION OF MODULE ADC0
OBJECT MODULE PLACED IN .\obj\ADC0.obj
COMPILER INVOKED BY: C:\Program Files\Keil\C166\BIN\C166.EXE ADC0.C MODV2 BROWSE MODV2 DEBUG OBJECT(.\obj\ADC0.obj) 

 stmt lvl     source

*** WARNING C500 IN LINE 1 OF ADC0.C: SERIAL NUMBER EXPIRED

    1         //****************************************************************************
    2         // @Module        Analog / Digital Converter  (ADC0)
    3         // @Filename      ADC0.C
    4         // @Project       balancebot.dav
    5         //----------------------------------------------------------------------------
    6         // @Controller    Infineon XE167F-96F66
    7         //
    8         // @Compiler      Keil
    9         //
   10         // @Codegenerator 2.2
   11         //
   12         // @Description   This file contains functions that use the ADC0 module.
   13         //
   14         //----------------------------------------------------------------------------
   15         // @Date          09.12.2013 18:51:38
   16         //
   17         //****************************************************************************
   18         
   19         // USER CODE BEGIN (ADC0_General,1)
   20         
   21         // USER CODE END
   22         
   23         
   24         
   25         //****************************************************************************
   26         // @Project Includes
   27         //****************************************************************************
   28         
   29         #include "MAIN.H"
   30         
   31         // USER CODE BEGIN (ADC0_General,2)
   32         
   33         // USER CODE END
   34         
   35         
   36         //****************************************************************************
   37         // @Macros
   38         //****************************************************************************
   39         
   40         // USER CODE BEGIN (ADC0_General,3)
   41         
   42         // USER CODE END
   43         
   44         
   45         //****************************************************************************
   46         // @Defines
   47         //****************************************************************************
   48         
   49         // USER CODE BEGIN (ADC0_General,4)
   50         
   51         // USER CODE END
   52         
   53         
   54         //****************************************************************************
C166 COMPILER V7.05, ADC0                                                                  12/12/2013 14:35:01 PAGE 2   

   55         // @Typedefs
   56         //****************************************************************************
   57         
   58         // USER CODE BEGIN (ADC0_General,5)
   59         
   60         // USER CODE END
   61         
   62         
   63         //****************************************************************************
   64         // @Imported Global Variables
   65         //****************************************************************************
   66         
   67         // USER CODE BEGIN (ADC0_General,6)
   68         
   69         // USER CODE END
   70         
   71         
   72         //****************************************************************************
   73         // @Global Variables
   74         //****************************************************************************
   75         
   76         // USER CODE BEGIN (ADC0_General,7)
   77         
   78         // USER CODE END
   79         
   80         
   81         //****************************************************************************
   82         // @External Prototypes
   83         //****************************************************************************
   84         
   85         // USER CODE BEGIN (ADC0_General,8)
   86         
   87         // USER CODE END
   88         
   89         
   90         //****************************************************************************
   91         // @Prototypes Of Local Functions
   92         //****************************************************************************
   93         
   94         // USER CODE BEGIN (ADC0_General,9)
   95         
   96         // USER CODE END
   97         
   98         
   99         //****************************************************************************
  100         // @Function      void ADC0_vInit(void) 
  101         //
  102         //----------------------------------------------------------------------------
  103         // @Description   This is the initialization function of the ADC function 
  104         //                library. It is assumed that the SFRs used by this library 
  105         //                are in reset state. 
  106         //                
  107         //                Following SFR fields will be initialized:
  108         //                GLOBCTR  - Global Control
  109         //                RSPR0    - Priority and Arbitration Register
  110         //                ASENR    - Arbitration slot enable register
  111         //                CHCTRx   - Channel Control Register x
  112         //                RCRx     - Result Control Register x
  113         //                KSCFG    - Module configuration Register
  114         //                INPCR    - Input class Registers
  115         //                CHINPRx  - Channel Interrupt register
  116         //                EVINPRx  - Event Interrupt register
C166 COMPILER V7.05, ADC0                                                                  12/12/2013 14:35:01 PAGE 3   

  117         //                SYNCTR   - Synchronisation control register
  118         //                LCBRx    - Limit check boundary register
  119         //                PISEL    - Port input selection
  120         //                QMR0     - Sequential 0 mode register
  121         //                CRMR1    - Parallel mode register
  122         //                QMR2     - Sequential 2 mode register
  123         //
  124         //----------------------------------------------------------------------------
  125         // @Returnvalue   None
  126         //
  127         //----------------------------------------------------------------------------
  128         // @Parameters    None
  129         //
  130         //----------------------------------------------------------------------------
  131         // @Date          09.12.2013
  132         //
  133         //****************************************************************************
  134         
  135         // USER CODE BEGIN (ADC0_Init,1)
  136         
  137         // USER CODE END
  138         
  139         void ADC0_vInit(void)
  140         {
  141  1        // USER CODE BEGIN (ADC0_Init,2)
  142  1      
  143  1        // USER CODE END
  144  1      
  145  1        ///  -----------------------------------------------------------------------
  146  1        ///  Configuration of ADC0 kernel configuration register:
  147  1        ///  -----------------------------------------------------------------------
  148  1        ADC0_KSCFG     =  0x0003;      // load ADC0 kernel configuration register
  149  1      
  150  1        ///  - the ADC module clock is enabled
  151  1        ///  - the ADC module clock = 66,00 MHz
  152  1        ///   
  153  1      
  154  1        _nop_();  // one cycle delay 
  155  1      
  156  1        _nop_();  // one cycle delay 
  157  1      
  158  1        ///  -----------------------------------------------------------------------
  159  1        ///  Configure global control register:
  160  1        ///  -----------------------------------------------------------------------
  161  1        ///  --- Conversion Timing -----------------
  162  1        ///  - conversion time (CTC)    = 02,58 us
  163  1      
  164  1        ///  _Analog clock is 1/10th of module clock and digital clock is 1/1 times 
  165  1        ///  of module clock
  166  1      
  167  1        ///  - the arbitration started by pending conversion request is selected
  168  1        ADC0_GLOBCTR   =  0x8009;      // load global control register
  169  1      
  170  1        ///  -----------------------------------------------------------------------
  171  1        ///  Configuration of Arbitration Slot enable register and also the Source 
  172  1        ///  Priority register:
  173  1        ///  -----------------------------------------------------------------------
  174  1        ///  - Arbitration Slot 0 is enabled
  175  1      
  176  1        ///  - Arbitration Slot 1 is enabled
  177  1      
  178  1        ///  - Arbitration Slot 2 is enabled
C166 COMPILER V7.05, ADC0                                                                  12/12/2013 14:35:01 PAGE 4   

  179  1      
  180  1        ///  - the priority of request source 0 is low
  181  1        ///  - the wait-for-start mode is selected for source 0
  182  1        ///  - the priority of request source 1 is low
  183  1        ///  - the wait-for-start mode is selected for source 1
  184  1        ///  - the priority of request source 2 is low
  185  1        ///  - the wait-for-start mode is selected for source 2
  186  1        ADC0_ASENR     =  0x0007;      // load Arbitration Slot enable register
  187  1      
  188  1        ADC0_RSPR0     =  0x0000;      // load Priority and Arbitration register
  189  1      
  190  1        ///  -----------------------------------------------------------------------
  191  1        ///  Configuration of Channel Control Registers:
  192  1        ///  -----------------------------------------------------------------------
  193  1        ///  Configuration of Channel 0
  194  1        ///  - the result register7 is selected
  195  1        ///  - the limit check 0 is selected
  196  1      
  197  1        ///  - the reference voltage selected is Standard Voltage (Varef)
  198  1      
  199  1        ///  - the input class selected is Input Class 0
  200  1      
  201  1        ///  - LCBR0 is selected as upper boundary
  202  1      
  203  1        ///  - LCBR1 is selected as lower boundary
  204  1      
  205  1        ADC0_CHCTR0    =  0x7004;      // load channel control register
  206  1      
  207  1        ///  Configuration of Channel 5
  208  1        ///  - the result register0 is selected
  209  1        ///  - the limit check 0 is selected
  210  1      
  211  1        ///  - the reference voltage selected is voltage accross analog channel 0
  212  1      
  213  1        ///  - the input class selected is Input Class 0
  214  1      
  215  1        ///  - LCBR0 is selected as upper boundary
  216  1      
  217  1        ///  - LCBR1 is selected as lower boundary
  218  1      
  219  1        ADC0_CHCTR5    =  0x0104;      // load channel control register
  220  1      
  221  1        ///  Configuration of Channel 6
  222  1        ///  - the result register1 is selected
  223  1        ///  - the limit check 0 is selected
  224  1      
  225  1        ///  - the reference voltage selected is voltage accross analog channel 0
  226  1      
  227  1        ///  - the input class selected is Input Class 0
  228  1      
  229  1        ///  - LCBR0 is selected as upper boundary
  230  1      
  231  1        ///  - LCBR1 is selected as lower boundary
  232  1      
  233  1        ADC0_CHCTR6    =  0x1104;      // load channel control register
  234  1      
  235  1        ///  Configuration of Channel 7
  236  1        ///  - the result register2 is selected
  237  1        ///  - the limit check 0 is selected
  238  1      
  239  1        ///  - the reference voltage selected is voltage accross analog channel 0
  240  1      
C166 COMPILER V7.05, ADC0                                                                  12/12/2013 14:35:01 PAGE 5   

  241  1        ///  - the input class selected is Input Class 0
  242  1      
  243  1        ///  - LCBR0 is selected as upper boundary
  244  1      
  245  1        ///  - LCBR1 is selected as lower boundary
  246  1      
  247  1        ADC0_CHCTR7    =  0x2104;      // load channel control register
  248  1      
  249  1        ///  Configuration of Channel 13
  250  1        ///  - the result register3 is selected
  251  1        ///  - the limit check 0 is selected
  252  1      
  253  1        ///  - the reference voltage selected is voltage accross analog channel 0
  254  1      
  255  1        ///  - the input class selected is Input Class 0
  256  1      
  257  1        ///  - LCBR0 is selected as upper boundary
  258  1      
  259  1        ///  - LCBR1 is selected as lower boundary
  260  1      
  261  1        ADC0_CHCTR13   =  0x3104;      // load channel control register
  262  1      
  263  1        ///  Configuration of Channel 14
  264  1        ///  - the result register4 is selected
  265  1        ///  - the limit check 0 is selected
  266  1      
  267  1        ///  - the reference voltage selected is voltage accross analog channel 0
  268  1      
  269  1        ///  - the input class selected is Input Class 0
  270  1      
  271  1        ///  - LCBR0 is selected as upper boundary
  272  1      
  273  1        ///  - LCBR1 is selected as lower boundary
  274  1      
  275  1        ADC0_CHCTR14   =  0x4104;      // load channel control register
  276  1      
  277  1        ///  Configuration of Channel 15
  278  1        ///  - the result register5 is selected
  279  1        ///  - the limit check 0 is selected
  280  1      
  281  1        ///  - the reference voltage selected is voltage accross analog channel 0
  282  1      
  283  1        ///  - the input class selected is Input Class 0
  284  1      
  285  1        ///  - LCBR0 is selected as upper boundary
  286  1      
  287  1        ///  - LCBR1 is selected as lower boundary
  288  1      
  289  1        ADC0_CHCTR15   =  0x5104;      // load channel control register
  290  1      
  291  1        ///  -----------------------------------------------------------------------
  292  1        ///  Configuration of Sample Time and Resolution:
  293  1        ///  -----------------------------------------------------------------------
  294  1      
  295  1        ///  10 bit resolution selected
  296  1      
  297  1        ADC0_INPCR0    =  0x0000;      // load input class0 register
  298  1      
  299  1        ///  10 bit resolution selected
  300  1      
  301  1        ADC0_INPCR1    =  0x0000;      // load input class1 register
  302  1      
C166 COMPILER V7.05, ADC0                                                                  12/12/2013 14:35:01 PAGE 6   

  303  1        ///  -----------------------------------------------------------------------
  304  1        ///  Configuration of Result Control Registers:
  305  1        ///  -----------------------------------------------------------------------
  306  1        ///  Configuration of Result Control Register 0
  307  1        ///  - the data reduction filter is disabled
  308  1        ///  - the event interrupt is disabled
  309  1        ///  - the wait-for-read mode is disabled
  310  1      
  311  1        ///  - the FIFO functionality is disabled
  312  1      
  313  1        ADC0_RCR0      =  0x0000;      // load result control register 0
  314  1      
  315  1        ///  Configuration of Result Control Register 1
  316  1        ///  - the data reduction filter is disabled
  317  1        ///  - the event interrupt is disabled
  318  1        ///  - the wait-for-read mode is disabled
  319  1      
  320  1        ///  - the FIFO functionality is disabled
  321  1      
  322  1        ADC0_RCR1      =  0x0000;      // load result control register 1
  323  1      
  324  1        ///  Configuration of Result Control Register 2
  325  1        ///  - the data reduction filter is disabled
  326  1        ///  - the event interrupt is disabled
  327  1        ///  - the wait-for-read mode is disabled
  328  1      
  329  1        ///  - the FIFO functionality is disabled
  330  1      
  331  1        ADC0_RCR2      =  0x0000;      // load result control register 2
  332  1      
  333  1        ///  Configuration of Result Control Register 3
  334  1        ///  - the data reduction filter is disabled
  335  1        ///  - the event interrupt is disabled
  336  1        ///  - the wait-for-read mode is disabled
  337  1      
  338  1        ///  - the FIFO functionality is disabled
  339  1      
  340  1        ADC0_RCR3      =  0x0000;      // load result control register 3
  341  1      
  342  1        ///  Configuration of Result Control Register 4
  343  1        ///  - the data reduction filter is disabled
  344  1        ///  - the event interrupt is disabled
  345  1        ///  - the wait-for-read mode is disabled
  346  1      
  347  1        ///  - the FIFO functionality is disabled
  348  1      
  349  1        ADC0_RCR4      =  0x0000;      // load result control register 4
  350  1      
  351  1        ///  Configuration of Result Control Register 5
  352  1        ///  - the data reduction filter is disabled
  353  1        ///  - the event interrupt is disabled
  354  1        ///  - the wait-for-read mode is disabled
  355  1      
  356  1        ///  - the FIFO functionality is disabled
  357  1      
  358  1        ADC0_RCR5      =  0x0000;      // load result control register 5
  359  1      
  360  1        ///  Configuration of Result Control Register 6
  361  1        ///  - the data reduction filter is disabled
  362  1        ///  - the event interrupt is disabled
  363  1        ///  - the wait-for-read mode is disabled
  364  1      
C166 COMPILER V7.05, ADC0                                                                  12/12/2013 14:35:01 PAGE 7   

  365  1        ///  - the FIFO functionality is disabled
  366  1      
  367  1        ADC0_RCR6      =  0x0000;      // load result control register 6
  368  1      
  369  1        ///  Configuration of Result Control Register 7
  370  1        ///  - the data reduction filter is disabled
  371  1        ///  - the event interrupt is disabled
  372  1        ///  - the wait-for-read mode is disabled
  373  1      
  374  1        ///  - the FIFO functionality is disabled
  375  1      
  376  1        ADC0_RCR7      =  0x0000;      // load result control register 7
  377  1      
  378  1        ///  -----------------------------------------------------------------------
  379  1        ///  Configuration of Channel Interrupt Node Pointer Register:
  380  1        ///  -----------------------------------------------------------------------
  381  1        ///  - the SR0 line become activated if channel 0 interrupt is generated
  382  1      
  383  1        ADC0_CHINPR0   =  0x0000;      // load channel interrupt node pointer 
  384  1                                       // register
  385  1      
  386  1        ///  - the SR0 line become activated if channel 5 interrupt is generated
  387  1      
  388  1        ///  - the SR0 line become activated if channel 6 interrupt is generated
  389  1      
  390  1        ///  - the SR0 line become activated if channel 7 interrupt is generated
  391  1      
  392  1        ADC0_CHINPR4   =  0x0000;      // load channel interrupt node pointer 
  393  1                                       // register
  394  1      
  395  1        ADC0_CHINPR8   =  0x0000;      // load channel interrupt node pointer 
  396  1                                       // register
  397  1      
  398  1        ///  - the SR0 line become activated if channel 13 interrupt is generated
  399  1      
  400  1        ///  - the SR0 line become activated if channel 14 interrupt is generated
  401  1      
  402  1        ///  - the SR0 line become activated if channel 15 interrupt is generated
  403  1      
  404  1        ADC0_CHINPR12  =  0x0000;      // load channel interrupt node pointer 
  405  1                                       // register
  406  1      
  407  1        ///  -----------------------------------------------------------------------
  408  1        ///  Configuration of Event Interrupt Node Pointer Register for Source 
  409  1        ///  Interrupts:
  410  1        ///  -----------------------------------------------------------------------
  411  1        ///  - the SR 0 line become activated if the event 0 interrupt is generated
  412  1        ///  - the SR 0 line become activated if the event 1 interrupt is generated
  413  1        ///  - the SR 0 line become activated if the event 2 interrupt is generated
  414  1      
  415  1        ADC0_EVINPR0   =  0x0000;      // load event interrupt set flag register 
  416  1      
  417  1        ///  -----------------------------------------------------------------------
  418  1        ///  Configuration of Event Interrupt Node Pointer Register for Result 
  419  1        ///  Interrupts:
  420  1        ///  -----------------------------------------------------------------------
  421  1      
  422  1        ADC0_EVINPR8   =  0x0000;      // load event interrupt set flag register 
  423  1      
  424  1      
  425  1        ADC0_EVINPR12  =  0x0000;      // load event interrupt set flag register 
  426  1      
C166 COMPILER V7.05, ADC0                                                                  12/12/2013 14:35:01 PAGE 8   

  427  1        ///  -----------------------------------------------------------------------
  428  1        ///  Configuration of Service Request Nodes 0 - 3 :
  429  1        ///  -----------------------------------------------------------------------
  430  1      
  431  1        ///  -----------------------------------------------------------------------
  432  1        ///  Configuration of Limit Check Boundary:
  433  1        ///  -----------------------------------------------------------------------
  434  1      
  435  1        ADC0_LCBR0     =  0x0198;      // load limit check boundary register 0
  436  1      
  437  1        ADC0_LCBR1     =  0x0E64;      // load limit check boundary register 1
  438  1      
  439  1        ADC0_LCBR2     =  0x0554;      // load limit check boundary register 2
  440  1      
  441  1        ADC0_LCBR3     =  0x0AA8;      // load limit check boundary register 3
  442  1      
  443  1        ///  -----------------------------------------------------------------------
  444  1        ///  Configuration of Gating source and External Trigger Control:
  445  1        ///  -----------------------------------------------------------------------
  446  1        ///  - No Gating source selected for Arbitration Source 0
  447  1      
  448  1        ///  - the trigger input ETR00 is selected for Source 0
  449  1      
  450  1        ///  - No Gating source selected for Arbitration Source 1
  451  1      
  452  1        ///  - the trigger input ETR00 is selected for Source 1
  453  1      
  454  1        ///  - No Gating source selected for Arbitration Source 2
  455  1      
  456  1        ///  - the trigger input ETR00 is selected for Source 1
  457  1      
  458  1        ADC0_PISEL     =  0x0444;      // load external trigger control register
  459  1      
  460  1        ///  -----------------------------------------------------------------------
  461  1        ///  Configuration of Conversion Queue Mode Register:Sequential Source 0
  462  1        ///  -----------------------------------------------------------------------
  463  1        ///  - the gating line is permanently Enabled
  464  1        ///  - the external trigger is disabled
  465  1      
  466  1        ADC0_QMR0      =  0x0001;      // load queue mode register
  467  1      
  468  1        ///  -----------------------------------------------------------------------
  469  1        ///  Configuration of Conversion Queue Mode Register:Sequential Source 2
  470  1        ///  -----------------------------------------------------------------------
  471  1        ///  - the gating line is permanently Enabled
  472  1        ///  - the external trigger is disabled
  473  1      
  474  1        ADC0_QMR2      =  0x0001;      // load queue mode register
  475  1      
  476  1        ///  -----------------------------------------------------------------------
  477  1        ///  Configuration of Conversion Request Mode Registers:Parallel Source 
  478  1        ///  -----------------------------------------------------------------------
  479  1        ///  - the gating line is permanently Enabled
  480  1        ///  - the external trigger is disabled
  481  1        ///  - the source interrupt is disabled
  482  1        ///  - the autoscan functionality is disabled
  483  1      
  484  1        ADC0_CRMR1     =  0x0001;      // load conversion request mode register 1
  485  1      
  486  1        ///  -----------------------------------------------------------------------
  487  1        ///  Configuration of Synchronisation Registers:
  488  1        ///  -----------------------------------------------------------------------
C166 COMPILER V7.05, ADC0                                                                  12/12/2013 14:35:01 PAGE 9   

  489  1        ///  - ADC0 is master 
  490  1        ADC0_SYNCTR   |=  0x0010;      // Synchronisation register
  491  1      
  492  1        P5_DIDIS       =  0xE0E1;      // Port 5 Digital input disable register
  493  1      
  494  1        ADC0_GLOBCTR  |=  0x0300;      // turn on Analog part
  495  1      
  496  1      
  497  1        // USER CODE BEGIN (ADC0_Init,3)
  498  1      
  499  1        // USER CODE END
  500  1      
  501  1      } //  End of function ADC0_vInit
  502         
  503         
  504         //****************************************************************************
  505         // @Function      void ADC0_vStartSeq0ReqChNum(ubyte ubExtTrg, ubyte 
  506         //                ubEnIntr, ubyte ubRFill, ubyte ubChannelNum) 
  507         //
  508         //----------------------------------------------------------------------------
  509         // @Description   This function starts the conversion of the requested 
  510         //                channel.
  511         //                NOTE -
  512         //                Before passing ubEnIntr argument as 1,make sure that Seq 0 
  513         //                source interrupt is enabled.
  514         //                External Trigger -> 0,Indicates software trigger 
  515         //                (Conversion starts once this function is executed)
  516         //
  517         //----------------------------------------------------------------------------
  518         // @Returnvalue   None
  519         //
  520         //----------------------------------------------------------------------------
  521         // @Parameters    ubExtTrg: 
  522         //                External Trigger : defines external trigger.
  523         // @Parameters    ubEnIntr: 
  524         //                Enable Source Interrupt : defines source interrupt
  525         // @Parameters    ubRFill: 
  526         //                Refill : defines the refill
  527         // @Parameters    ubChannelNum: 
  528         //                Channel number : Name of the Request Channel Number (0 - 
  529         //                15)- see macros defined in the header file
  530         //
  531         //----------------------------------------------------------------------------
  532         // @Date          09.12.2013
  533         //
  534         //****************************************************************************
  535         
  536         void ADC0_vStartSeq0ReqChNum(ubyte ubExtTrg, ubyte ubEnIntr, ubyte ubRFill, ubyte ubChannelNum)
  537         {
  538  1      
  539  1          uword uwVal = 0;
  540  1          if (ubExtTrg == 1)
  541  1          {
  542  2              uwVal = 0x0080;
  543  2          }
  544  1          if (ubEnIntr == 1)
  545  1          {
  546  2              uwVal = uwVal + 0x0040;
  547  2          }
  548  1          if (ubRFill == 1)
  549  1          {
  550  2              uwVal = uwVal + 0x0020;
C166 COMPILER V7.05, ADC0                                                                  12/12/2013 14:35:01 PAGE 10  

  551  2          }
  552  1          uwVal = uwVal + (ubChannelNum & 0x001f);
  553  1      
  554  1         ADC0_QINR0 = uwVal; // requested channel 
  555  1      
  556  1      } //  End of function ADC0_vStartSeq0ReqChNum
  557         
  558         
  559         //****************************************************************************
  560         // @Function      void ADC0_vStartSeq2ReqChNum(ubyte ubExtTrg, ubyte 
  561         //                ubEnIntr, ubyte ubRFill, ubyte ubChannelNum) 
  562         //
  563         //----------------------------------------------------------------------------
  564         // @Description   This function starts the conversion of the requested 
  565         //                channel.
  566         //                NOTE -
  567         //                Before passing ubEnIntr argument as 1,make sure that Seq 2 
  568         //                source interrupt is enabled.
  569         //                External Trigger -> 0,Indicates software trigger 
  570         //                (Conversion starts once this function is executed)
  571         //
  572         //----------------------------------------------------------------------------
  573         // @Returnvalue   None
  574         //
  575         //----------------------------------------------------------------------------
  576         // @Parameters    ubExtTrg: 
  577         //                External Trigger : defines external trigger.
  578         // @Parameters    ubEnIntr: 
  579         //                Enable Source Interrupt : defines source interrupt
  580         // @Parameters    ubRFill: 
  581         //                Refill : defines the refill
  582         // @Parameters    ubChannelNum: 
  583         //                Channel number : Name of the Request Channel Number (0 - 
  584         //                15) - see macros defined in the header file
  585         //
  586         //----------------------------------------------------------------------------
  587         // @Date          09.12.2013
  588         //
  589         //****************************************************************************
  590         
  591         void ADC0_vStartSeq2ReqChNum(ubyte ubExtTrg, ubyte ubEnIntr, ubyte ubRFill, ubyte ubChannelNum)
  592         {
  593  1      
  594  1          uword uwVal = 0;
  595  1          if (ubExtTrg == 1)
  596  1          {
  597  2              uwVal = 0x0080;
  598  2          }
  599  1          if (ubEnIntr == 1)
  600  1          {
  601  2              uwVal = uwVal + 0x0040;
  602  2          }
  603  1          if (ubRFill == 1)
  604  1          {
  605  2              uwVal = uwVal + 0x0020;
  606  2          }
  607  1          uwVal = uwVal + (ubChannelNum & 0x001f);
  608  1      
  609  1        ADC0_QINR2 = uwVal; // requested channel 
  610  1      
  611  1      } //  End of function ADC0_vStartSeq2ReqChNum
  612         
C166 COMPILER V7.05, ADC0                                                                  12/12/2013 14:35:01 PAGE 11  

  613         
  614         //****************************************************************************
  615         // @Function      void ADC0_vStartParReqChNum(uword uwChannelNum) 
  616         //
  617         //----------------------------------------------------------------------------
  618         // @Description   This function starts conversion request of analog 
  619         //                channel.The possible values for the request channels are: 
  620         //                Bit 0 = 1   ->  analog channel 0 is requested for 
  621         //                conversion 
  622         //                Bit 4 = 1   ->  analog channel 4 is requested for 
  623         //                conversion 
  624         //                Bit 8 = 1   ->  analog channel 8 is requested for 
  625         //                conversion 
  626         //                Bit 12 = 1   ->  analog channel 12 is requested for 
  627         //                conversion 
  628         //
  629         //----------------------------------------------------------------------------
  630         // @Returnvalue   None
  631         //
  632         //----------------------------------------------------------------------------
  633         // @Parameters    uwChannelNum: 
  634         //                ChannelNumber : defines the channel number for parallel 
  635         //                source to start conversion
  636         //
  637         //----------------------------------------------------------------------------
  638         // @Date          09.12.2013
  639         //
  640         //****************************************************************************
  641         
  642         void ADC0_vStartParReqChNum(uword uwChannelNum)
  643         {
  644  1      
  645  1         ADC0_CRCR1 |= uwChannelNum; // requested channel 
  646  1      
  647  1      } //  End of function ADC0_vStartParReqChNum
  648         
  649         
  650         //****************************************************************************
  651         // @Function      void ADC0_vSeqSoftTrigger(ubyte ubSrc) 
  652         //
  653         //----------------------------------------------------------------------------
  654         // @Description   This function sets TREV bit for the requested sequential 
  655         //                source in the register QMRx.
  656         //                It is applicable only when sequential source conversion 
  657         //                request API is called with 'ubExtTrg' parameter set to '1'.
  658         //                This API helps in triggering (software) all the sequential 
  659         //                conversion requests which are waiting for external hardware 
  660         //                trigger to occur.
  661         //                Ex- ubSrc = ADC0_SOURCE_0,for sequential source 0
  662         //                    ubSrc = ADC0_SOURCE_2,for sequential source 2
  663         //
  664         //----------------------------------------------------------------------------
  665         // @Returnvalue   None
  666         //
  667         //----------------------------------------------------------------------------
  668         // @Parameters    ubSrc: 
  669         //                ubSrc: defines the sequential source number
  670         //
  671         //----------------------------------------------------------------------------
  672         // @Date          09.12.2013
  673         //
  674         //****************************************************************************
C166 COMPILER V7.05, ADC0                                                                  12/12/2013 14:35:01 PAGE 12  

  675         
  676         void ADC0_vSeqSoftTrigger(ubyte ubSrc)
  677         {
  678  1      
  679  1            if(ubSrc == 0) // sequential source 0
  680  1            {
  681  2               while(!(ADC0_QSR0 & 0x0020))  //Do until queue is empty
  682  2               {
  683  3                  ADC0_QMR0 |= 0x0200; // software trigger event 
  684  3               }
  685  2      
  686  2            }
  687  1      
  688  1            else if(ubSrc == 2) //sequential source 2
  689  1            {
  690  2               while(!(ADC0_QSR2 & 0x0020))  //Do until queue is empty
  691  2               {
  692  3                  ADC0_QMR2 |= 0x0200; // software trigger event 
  693  3               }
  694  2      
  695  2            }
  696  1      
  697  1            else
  698  1            {
  699  2                //Do nothing 
  700  2      
  701  2            }
  702  1      
  703  1      } //  End of function ADC0_vSeqSoftTrigger
  704         
  705         
  706         
  707         // USER CODE BEGIN (ADC0_General,10)
  708         
  709         // USER CODE END
  710         


MODULE INFORMATION:   INITIALIZED  UNINITIALIZED
  CODE SIZE        =         402     --------
  NEAR-CONST SIZE  =    --------     --------
  FAR-CONST SIZE   =    --------     --------
  HUGE-CONST SIZE  =    --------     --------
  XHUGE-CONST SIZE =    --------     --------
  NEAR-DATA SIZE   =    --------     --------
  FAR-DATA SIZE    =    --------     --------
  XHUGE-DATA SIZE  =    --------     --------
  IDATA-DATA SIZE  =    --------     --------
  SDATA-DATA SIZE  =    --------     --------
  BDATA-DATA SIZE  =    --------     --------
  HUGE-DATA SIZE   =    --------     --------
  BIT SIZE         =    --------     --------
  INIT'L SIZE      =    --------     --------
END OF MODULE INFORMATION.


C166 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
