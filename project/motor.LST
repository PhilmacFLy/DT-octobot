C166 COMPILER V7.05, MOTOR                                                                 12/05/2013 12:54:48 PAGE 1   


C166 COMPILER V7.05, COMPILATION OF MODULE MOTOR
OBJECT MODULE PLACED IN .\obj\motor.obj
COMPILER INVOKED BY: C:\Program Files\Keil\C166\BIN\C166.EXE motor.c MODV2 BROWSE MODV2 DEBUG OBJECT(.\obj\motor.obj) 

 stmt lvl     source

*** WARNING C500 IN LINE 1 OF motor.c: SERIAL NUMBER EXPIRED

    1         
    2         #include "XE16xREGS.H"
    3         
    4         #include "CCU60.H"
    5         #include "IO.H"
    6         #include "math.h"
    7         #include "megatron.h"
    8         #include "motor.h"
    9         
   10         volatile unsigned int megatroncounter = 0;
   11         volatile unsigned int megatronleft = 0;
   12         volatile unsigned int megatronright = 0;
   13                            
   14         volatile unsigned int optimusprimeleft;
   15         volatile unsigned int optimusprimeright;
   16         
   17         void SetMotorSpeedsNoReturn(signed int left, signed int right)
   18         {
   19  1        SetMotorSpeeds(&left, &right);
   20  1      }
   21         
   22         void SetMotorSpeeds(signed int* left_p, signed int* right_p)
   23         {
   24  1        signed int left = *left_p;
   25  1        signed int right = *right_p;
   26  1      
   27  1        static signed int lastleft = 0;
   28  1        static signed int lastright = 0;
   29  1      
   30  1        // zu hohe werte abfangen
   31  1        if (left > 0xFF) left = 0xFF;
   32  1        if (left < -0xFF) left = -0xFF;
   33  1        if (right > 0xFF) right = 0xFF;
   34  1        if (right < -0xFF) right = -0xFF;
   35  1      
   36  1        // maximal speed um 25 aendern
   37  1        if (25 < abs(left - lastleft))
   38  1        {
   39  2          if (left > lastleft) left = lastleft + 25;
   40  2              else left = lastleft - 25;
   41  2        }
   42  1        if (25 < abs(right - lastright))
   43  1        {
   44  2          if (right > lastright) right = lastright + 25;
   45  2              else right = lastright - 25;
   46  2        }
   47  1         
   48  1        // megatron auslesen alle 10 cycles
   49  1        megatroncounter = (megatroncounter + 1);
   50  1        if (megatroncounter == 10)
   51  1        {
   52  2              megatronleft = ReadMegatronLeft();
   53  2              megatronright = ReadMegatronRight();
   54  2              megatroncounter = 0;
C166 COMPILER V7.05, MOTOR                                                                 12/05/2013 12:54:48 PAGE 2   

   55  2        }
   56  1      
   57  1        // muss evtl angepasst werden         
   58  1        // verhaeltnis der megatrons errechnen
   59  1        if (lastleft != 0) optimusprimeleft = megatronleft * 0x10 / abs(lastleft);
   60  1        else optimusprimeleft = 0;
   61  1        if (lastright != 0) optimusprimeright = megatronright * 0x10 / abs(lastright);
   62  1        else optimusprimeright = 0;
   63  1      
   64  1        // vor nachjustierung errechnete werte speichern
   65  1        lastleft = left;
   66  1        lastright = right;
   67  1      
   68  1        if (optimusprimeleft > 0 && optimusprimeright > 0)
   69  1        {
   70  2              if (optimusprimeleft > optimusprimeright) // links "schneller" als rechts
   71  2              {
   72  3                // links langsamer drehen
   73  3                left = left * ((signed int) optimusprimeright) / ((signed int) optimusprimeleft);
   74  3              }
   75  2              if (optimusprimeright > optimusprimeleft) // rechts "schneller" als links
   76  2              {
   77  3                // rechts langsamer drehen
   78  3            right = right * ((signed int) optimusprimeleft) / ((signed int) optimusprimeright);
   79  3              }
   80  2        }
   81  1      
   82  1      
   83  1        if (left < 0)
   84  1          SetMotorSpeedLeft(MOTOR_BACKWARD, abs(left));
   85  1        else
   86  1              SetMotorSpeedLeft(MOTOR_FORWARD, left); // kein abs noetig, da left>=0
   87  1        
   88  1        if (right < 0)
   89  1          SetMotorSpeedRight(MOTOR_BACKWARD, abs(right));
   90  1        else
   91  1          SetMotorSpeedRight(MOTOR_FORWARD, right); // kein abs noetig, da right>=0
   92  1        
   93  1        *left_p = left;
   94  1        *right_p = right;
   95  1      }
   96         
   97         // API for Left Motor
   98         void SetMotorSpeedLeft(unsigned char direction, unsigned char speed)
   99         {
  100  1        CCU60_vLoadChannelShadowRegister(CCU60_CHANNEL_0, (0xFF - speed)); // ?
  101  1        CCU60_vEnableShadowTransfer(CCU60_TIMER_12);
  102  1        // rechter motor direction pin = 0 für vorwärts
  103  1        if (MOTOR_FORWARD == direction)
  104  1        {
  105  2          P4_OUT_P4 = 0;
  106  2        }
  107  1        else
  108  1        {
  109  2          P4_OUT_P4 = 1;
  110  2        }
  111  1      }
  112         
  113         // API for Right Motor
  114         void SetMotorSpeedRight(unsigned char direction, unsigned char speed)
  115         {
  116  1        CCU60_vLoadChannelShadowRegister(CCU60_CHANNEL_1, (0xFF - speed)); // ?
C166 COMPILER V7.05, MOTOR                                                                 12/05/2013 12:54:48 PAGE 3   

  117  1        CCU60_vEnableShadowTransfer(CCU60_TIMER_12);
  118  1        // rechter motor direction pin = 1 für vorwärts
  119  1        if (MOTOR_FORWARD == direction)
  120  1        {
  121  2          P4_OUT_P1 = 1;
  122  2        }
  123  1        else
  124  1        {
  125  2          P4_OUT_P1 = 0;
  126  2        }
  127  1      }


MODULE INFORMATION:   INITIALIZED  UNINITIALIZED
  CODE SIZE        =         490     --------
  NEAR-CONST SIZE  =    --------     --------
  FAR-CONST SIZE   =    --------     --------
  HUGE-CONST SIZE  =    --------     --------
  XHUGE-CONST SIZE =    --------     --------
  NEAR-DATA SIZE   =          14     --------
  FAR-DATA SIZE    =    --------     --------
  XHUGE-DATA SIZE  =    --------     --------
  IDATA-DATA SIZE  =    --------     --------
  SDATA-DATA SIZE  =    --------     --------
  BDATA-DATA SIZE  =    --------     --------
  HUGE-DATA SIZE   =    --------     --------
  BIT SIZE         =    --------     --------
  INIT'L SIZE      =          30     --------
END OF MODULE INFORMATION.


C166 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
