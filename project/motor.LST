C166 COMPILER V7.05, MOTOR                                                                 12/16/2013 19:11:14 PAGE 1   


C166 COMPILER V7.05, COMPILATION OF MODULE MOTOR
OBJECT MODULE PLACED IN .\obj\motor.obj
COMPILER INVOKED BY: C:\Program Files\Keil\C166\BIN\C166.EXE motor.c MODV2 BROWSE MODV2 DEBUG OBJECT(.\obj\motor.obj) 

 stmt lvl     source

*** WARNING C500 IN LINE 1 OF motor.c: SERIAL NUMBER EXPIRED

    1         
    2         #include "XE16xREGS.H"
    3         
    4         #include "CCU60.H"
    5         #include "IO.H"
    6         #include "math.h"
    7         #include "megatron.h"
    8         #include "motor.h"
    9          
   10         #define LOW_SPEED_MAX (10)
   11         #define LOW_SPEED_MIN (3)
   12         
   13         unsigned int MAX_ACCELERATION = 30;
   14         
   15         volatile unsigned int megatroncounter = 0;
   16         volatile unsigned int megatronleft = 0;
   17         volatile unsigned int megatronright = 0;
   18                            
   19         volatile unsigned int optimusprimeleft;
   20         volatile unsigned int optimusprimeright;
   21         
   22         volatile unsigned int leftspeed = 0;
   23         volatile unsigned int rightspeed = 0;
   24         
   25         volatile signed long winkel = 0;
   26         
   27         void SetMotorSpeedsNoReturn(signed int left, signed int right, signed long winkel)
   28         {
   29  1        SetMotorSpeeds(&left, &right, winkel);
   30  1      }
   31         
   32         void SetMotorSpeeds(signed int* left_p, signed int* right_p, signed long winkel)
   33         {
   34  1        signed int left = *left_p;
   35  1        signed int right = *right_p;
   36  1      
   37  1        static signed int lastleft = 0;
   38  1        static signed int lastright = 0;
   39  1      //  winkel += 8;
   40  1        // zu hohe werte abfangen
   41  1        if (left > 0xFF) left = 0xFF;
   42  1        if (left < -0xFF) left = -0xFF;
   43  1        if (right > 0xFF) right = 0xFF;
   44  1        if (right < -0xFF) right = -0xFF;
   45  1      
   46  1        // zu geringe werte abfangen
   47  1        //if (left  <=  LOW_SPEED_MAX && left  >=  LOW_SPEED_MIN) left  =  LOW_SPEED_MAX;
   48  1        //if (left  >= -LOW_SPEED_MAX && left  <= -LOW_SPEED_MIN) left  = -LOW_SPEED_MAX;
   49  1        //if (right <=  LOW_SPEED_MAX && right >=  LOW_SPEED_MIN) right =  LOW_SPEED_MAX;
   50  1        //if (right >= -LOW_SPEED_MAX && right <= -LOW_SPEED_MIN) right = -LOW_SPEED_MAX;
   51  1      
   52  1        //if (winkel == 0) winkel = 10;
   53  1        // maximal speed um MAX_ACCELERATION aendern
   54  1       // maximal speed um 25 aendern
C166 COMPILER V7.05, MOTOR                                                                 12/16/2013 19:11:14 PAGE 2   

   55  1        if (MAX_ACCELERATION < abs(left - lastleft))
   56  1        {
   57  2          if (left > lastleft) left = lastleft + MAX_ACCELERATION;
   58  2              else left = lastleft - MAX_ACCELERATION;
   59  2        }
   60  1        if (MAX_ACCELERATION < abs(right - lastright))
   61  1        {
   62  2          if (right > lastright) right = lastright + MAX_ACCELERATION;
   63  2              else right = lastright - MAX_ACCELERATION;
   64  2        }
   65  1         
   66  1        // megatron auslesen alle 10 cycles
   67  1        megatroncounter = (megatroncounter + 1);
   68  1        if (megatroncounter == 10)
   69  1        {
   70  2              megatronleft = ReadMegatronLeft();
   71  2              megatronright = ReadMegatronRight();
   72  2              megatroncounter = 0;
   73  2        }
   74  1      
   75  1        // muss evtl angepasst werden         
   76  1        // verhaeltnis der megatrons errechnen
   77  1        if (lastleft != 0) optimusprimeleft = megatronleft * 0x10 / abs(lastleft);
   78  1        else optimusprimeleft = 0;
   79  1        if (lastright != 0) optimusprimeright = megatronright * 0x10 / abs(lastright);
   80  1        else optimusprimeright = 0;
   81  1      
   82  1        // vor nachjustierung errechnete werte speichern
   83  1        lastleft = left;
   84  1        lastright = right;
   85  1      
   86  1        if (optimusprimeleft > 0 && optimusprimeright > 0)
   87  1        {
   88  2              if (optimusprimeleft > optimusprimeright) // links "schneller" als rechts
   89  2              {
   90  3                // links langsamer drehen
   91  3                left = left * ((signed int) optimusprimeright) / ((signed int) optimusprimeleft);
   92  3              }
   93  2              if (optimusprimeright > optimusprimeleft) // rechts "schneller" als links
   94  2              {
   95  3                // rechts langsamer drehen
   96  3            right = right * ((signed int) optimusprimeleft) / ((signed int) optimusprimeright);
   97  3              }
   98  2        }
   99  1      
  100  1      
  101  1        if (left < 0)
  102  1          SetMotorSpeedLeft(MOTOR_BACKWARD, abs(left));
  103  1        else
  104  1              SetMotorSpeedLeft(MOTOR_FORWARD, left); // kein abs noetig, da left>=0
  105  1        
  106  1        if (right < 0)
  107  1          SetMotorSpeedRight(MOTOR_BACKWARD, abs(right));
  108  1        else
  109  1          SetMotorSpeedRight(MOTOR_FORWARD, right); // kein abs noetig, da right>=0
  110  1        
  111  1        *left_p = left;
  112  1        *right_p = right;
  113  1      }
*** WARNING C47 IN LINE 32 OF motor.c: 'winkel': unreferenced parameter
  114         
  115         // API for Left Motor
C166 COMPILER V7.05, MOTOR                                                                 12/16/2013 19:11:14 PAGE 3   

  116         void SetMotorSpeedLeft(unsigned char direction, unsigned char speed)
  117         {
  118  1        leftspeed = speed;
  119  1        CCU60_vLoadChannelShadowRegister(CCU60_CHANNEL_0, (0xFF - speed)); // ?
  120  1        CCU60_vEnableShadowTransfer(CCU60_TIMER_12);
  121  1        // rechter motor direction pin = 0 für vorwärts
  122  1        if (MOTOR_FORWARD == direction)
  123  1        {
  124  2          P4_OUT_P4 = 0;
  125  2        }
  126  1        else
  127  1        {
  128  2          P4_OUT_P4 = 1;
  129  2        }
  130  1      }
  131         
  132         // API for Right Motor
  133         void SetMotorSpeedRight(unsigned char direction, unsigned char speed)
  134         {
  135  1        rightspeed = speed;
  136  1        CCU60_vLoadChannelShadowRegister(CCU60_CHANNEL_1, (0xFF - speed)); // ?
  137  1        CCU60_vEnableShadowTransfer(CCU60_TIMER_12);
  138  1        // rechter motor direction pin = 1 für vorwärts
  139  1        if (MOTOR_FORWARD == direction)
  140  1        {
  141  2          P4_OUT_P1 = 1;
  142  2        }
  143  1        else
  144  1        {
  145  2          P4_OUT_P1 = 0;
  146  2        }
  147  1      }


MODULE INFORMATION:   INITIALIZED  UNINITIALIZED
  CODE SIZE        =         498     --------
  NEAR-CONST SIZE  =    --------     --------
  FAR-CONST SIZE   =    --------     --------
  HUGE-CONST SIZE  =    --------     --------
  XHUGE-CONST SIZE =    --------     --------
  NEAR-DATA SIZE   =          24     --------
  FAR-DATA SIZE    =    --------     --------
  XHUGE-DATA SIZE  =    --------     --------
  IDATA-DATA SIZE  =    --------     --------
  SDATA-DATA SIZE  =    --------     --------
  BDATA-DATA SIZE  =    --------     --------
  HUGE-DATA SIZE   =    --------     --------
  BIT SIZE         =    --------     --------
  INIT'L SIZE      =          56     --------
END OF MODULE INFORMATION.


C166 COMPILATION COMPLETE.  2 WARNING(S),  0 ERROR(S)
