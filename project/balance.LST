C166 COMPILER V7.05, BALANCE                                                               12/16/2013 19:11:14 PAGE 1   


C166 COMPILER V7.05, COMPILATION OF MODULE BALANCE
OBJECT MODULE PLACED IN .\obj\balance.obj
COMPILER INVOKED BY: C:\Program Files\Keil\C166\BIN\C166.EXE balance.c MODV2 BROWSE MODV2 DEBUG OBJECT(.\obj\balance.obj
                    -) 

 stmt lvl     source

*** WARNING C500 IN LINE 1 OF balance.c: SERIAL NUMBER EXPIRED

    1                 
    2         #include "motor.h"
    3         #include "megatron.h"
    4         #include "sensoric.h"
    5                 
    6         #define NUM_INTEGRAL_VALUES (10)
    7         
    8         volatile signed int wantedAngle = 0;
    9         
   10         volatile signed int left = 0;
   11         volatile signed int right = 0;
   12         volatile signed long motorvalue = 0;
   13                         
   14         volatile signed long angle;
   15         volatile signed long spin;
   16         
   17         // adjustable here and in debugger
   18         volatile signed int C_PROPORTIONAL = 30;
   19         volatile signed int C_INTEGRAL = 2;
   20         volatile signed int C_DIFFERENTIAL = 5;
   21         
   22         volatile signed int C_DIVISOR = 6;
   23         
   24         volatile signed int NIXTUWINKEL = 2;
   25         
   26         signed int integralvalues[10];
   27         int index = 0;
   28         
   29         int someerrorhappened = 0;
   30         
   31         static signed int GetIntegralVal()
   32         {
   33  1              signed int r = 0;
   34  1              int i = 0;
   35  1              for (i = 0; i < NUM_INTEGRAL_VALUES; i++) r += integralvalues[i];
   36  1              return (r / NUM_INTEGRAL_VALUES);
   37  1      }
   38         
   39         void BalanceInit()
   40         {
   41  1              int i;
   42  1              for (i = 0; i < NUM_INTEGRAL_VALUES; i++)
   43  1              {
   44  2                      integralvalues[i] = 0;
   45  2              }
   46  1              motorvalue = 0;
   47  1      }
   48         
   49         void Balance()
   50         {
   51  1              angle = GetCurrentAngle();
   52  1              spin = (angle - integralvalues[index]);//ReadSpinValue();
   53  1              if ((angle <= NIXTUWINKEL) && (angle >= -NIXTUWINKEL)) angle = 0;
C166 COMPILER V7.05, BALANCE                                                               12/16/2013 19:11:14 PAGE 2   

   54  1              //if ((angle <= NIXTUWINKEL && angle >= 0) || (angle >= -NIXTUWINKEL && angle <= 0)) angle = 0;
   55  1              //else angle += 3;
   56  1              //if (angle >= -1 && angle <= 0) angle = 0;
   57  1              
   58  1              integralvalues[index] = angle;
*** WARNING C192 IN LINE 58 OF balance.c: '=': value truncated
   59  1              index = (index + 1) % NUM_INTEGRAL_VALUES;
   60  1      
   61  1          if (angle >= 25 || angle <= -25) someerrorhappened = 1;
   62  1              if (angle <  5  && angle >  -5)  someerrorhappened = 0;
   63  1              if (someerrorhappened == 1)
   64  1              {
   65  2                      SetMotorSpeedsNoReturn(0, 0, 25);
   66  2                      return;
   67  2              }
   68  1      
   69  1              motorvalue = 0;
   70  1              motorvalue += C_PROPORTIONAL * angle;
   71  1              motorvalue += C_DIFFERENTIAL * spin;
   72  1              motorvalue += C_INTEGRAL * GetIntegralVal();
   73  1              //motorvalue /= C_DIVISOR;
   74  1              if (motorvalue > 255 * C_DIVISOR)
   75  1                motorvalue = 255 * C_DIVISOR;
   76  1              if (motorvalue < -255 * C_DIVISOR)
   77  1                motorvalue = -255 * C_DIVISOR;
   78  1      
   79  1              left = motorvalue / C_DIVISOR;
*** WARNING C192 IN LINE 79 OF balance.c: '=': value truncated
   80  1              right = motorvalue / C_DIVISOR;
*** WARNING C192 IN LINE 80 OF balance.c: '=': value truncated
   81  1              SetMotorSpeedsNoReturn(left, right, angle);
   82  1      }


MODULE INFORMATION:   INITIALIZED  UNINITIALIZED
  CODE SIZE        =         544     --------
  NEAR-CONST SIZE  =    --------     --------
  FAR-CONST SIZE   =    --------     --------
  HUGE-CONST SIZE  =    --------     --------
  XHUGE-CONST SIZE =    --------     --------
  NEAR-DATA SIZE   =          52     --------
  FAR-DATA SIZE    =    --------     --------
  XHUGE-DATA SIZE  =    --------     --------
  IDATA-DATA SIZE  =    --------     --------
  SDATA-DATA SIZE  =    --------     --------
  BDATA-DATA SIZE  =    --------     --------
  HUGE-DATA SIZE   =    --------     --------
  BIT SIZE         =    --------     --------
  INIT'L SIZE      =          68     --------
END OF MODULE INFORMATION.


C166 COMPILATION COMPLETE.  4 WARNING(S),  0 ERROR(S)
