C166 COMPILER V7.05, MAIN                                                                  11/28/2013 14:13:50 PAGE 1   


C166 COMPILER V7.05, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\obj\MAIN.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Keil\C166\BIN\C166.EXE MAIN.C MODV2 BROWSE MODV2 DEBUG OBJECT(.\obj\MAIN.obj
                    -) 

 stmt lvl     source

    1         //****************************************************************************
    2         // @Module        Project Settings
    3         // @Filename      MAIN.C
    4         // @Project       balancebot.dav
    5         //----------------------------------------------------------------------------
    6         // @Controller    Infineon XE167F-96F66
    7         //
    8         // @Compiler      Keil
    9         //
   10         // @Codegenerator 2.2
   11         //
   12         // @Description   This file contains the project initialization function.
   13         //
   14         //----------------------------------------------------------------------------
   15         // @Date          28.11.2013 13:40:50
   16         //
   17         //****************************************************************************
   18         
   19         // USER CODE BEGIN (MAIN_General,1)
   20         
   21         // USER CODE END
   22         
   23         
   24         
   25         //****************************************************************************
   26         // @Project Includes
   27         //****************************************************************************
   28         
   29         #include "MAIN.H"
   30         
   31         // USER CODE BEGIN (MAIN_General,2)
   32         
   33         #include "motor.h"
   34         #include "megatron.h"
   35         // USER CODE END
   36         
   37         
   38         //****************************************************************************
   39         // @Macros
   40         //****************************************************************************
   41         
   42         // USER CODE BEGIN (MAIN_General,3)
   43         
   44         // USER CODE END
   45         
   46         
   47         //****************************************************************************
   48         // @Defines
   49         //****************************************************************************
   50         
   51         // USER CODE BEGIN (MAIN_General,4)
   52         
   53         // USER CODE END
   54         
C166 COMPILER V7.05, MAIN                                                                  11/28/2013 14:13:50 PAGE 2   

   55         
   56         //****************************************************************************
   57         // @Typedefs
   58         //****************************************************************************
   59         
   60         // USER CODE BEGIN (MAIN_General,5)
   61         
   62         // USER CODE END
   63         
   64         
   65         //****************************************************************************
   66         // @Imported Global Variables
   67         //****************************************************************************
   68         
   69         // USER CODE BEGIN (MAIN_General,6)
   70         
   71         // USER CODE END
   72         
   73         
   74         //****************************************************************************
   75         // @Global Variables
   76         //****************************************************************************
   77         
   78         // USER CODE BEGIN (MAIN_General,7)
   79         volatile unsigned char timerevent = 0;
   80         // USER CODE END
   81         
   82         
   83         //****************************************************************************
   84         // @External Prototypes
   85         //****************************************************************************
   86         
   87         // USER CODE BEGIN (MAIN_General,8)
   88         
   89         // USER CODE END
   90         
   91         
   92         //****************************************************************************
   93         // @Prototypes Of Local Functions
   94         //****************************************************************************
   95         
   96         // USER CODE BEGIN (MAIN_General,9)
   97         
   98         // USER CODE END
   99         
  100         
  101         //****************************************************************************
  102         // @Function      void MAIN_vInit(void) 
  103         //
  104         //----------------------------------------------------------------------------
  105         // @Description   This function initializes the microcontroller.
  106         //
  107         //----------------------------------------------------------------------------
  108         // @Returnvalue   None
  109         //
  110         //----------------------------------------------------------------------------
  111         // @Parameters    None
  112         //
  113         //----------------------------------------------------------------------------
  114         // @Date          28.11.2013
  115         //
  116         //****************************************************************************
C166 COMPILER V7.05, MAIN                                                                  11/28/2013 14:13:50 PAGE 3   

  117         
  118         // USER CODE BEGIN (Init,1)
  119         
  120         // USER CODE END
  121         
  122         void MAIN_vInit(void)
  123         {
  124  1        // USER CODE BEGIN (Init,2)
  125  1      
  126  1        // USER CODE END
  127  1      
  128  1        //   globally disable interrupts
  129  1        PSW_IEN        =  0;          
  130  1      
  131  1      
  132  1        ///  -----------------------------------------------------------------------
  133  1        ///  Configuration of the System Clock:
  134  1        ///  -----------------------------------------------------------------------
  135  1        ///  - VCO clock used, input clock is connected
  136  1        ///  - input frequency is 8,00 MHz
  137  1        ///  - system clock is 66.00 MHz
  138  1      
  139  1        MAIN_vUnlockProtecReg();     // unlock write security
  140  1      
  141  1        MAIN_vChangeFreq();          // load PLL control register
  142  1      
  143  1        //   -----------------------------------------------------------------------
  144  1        //   Initialization of the Peripherals:
  145  1        //   -----------------------------------------------------------------------
  146  1      
  147  1        //   initializes the Parallel Ports
  148  1        IO_vInit();
  149  1      
  150  1        //   initializes the General Purpose Timer Unit (GPT1)
  151  1        GPT1_vInit();
  152  1      
  153  1        //   initializes the General Purpose Timer Unit (GPT2)
  154  1        GPT2_vInit();
  155  1      
  156  1        //   initializes the Capture / Compare Unit 60 (CCU60)
  157  1        CCU60_vInit();
  158  1      
  159  1        //   initializes the Analog / Digital Converter  (ADC0)
  160  1        ADC0_vInit();
  161  1      
  162  1      
  163  1        //   -----------------------------------------------------------------------
  164  1        //   Initialization of the Bank Select registers:
  165  1        //   -----------------------------------------------------------------------
  166  1      
  167  1      
  168  1        // USER CODE BEGIN (Init,3)
  169  1      
  170  1        // USER CODE END
  171  1      
  172  1        MAIN_vLockProtecReg();       // lock write security
  173  1      
  174  1        //   globally enable interrupts
  175  1        PSW_IEN        =  1;          
  176  1      
  177  1      } //  End of function MAIN_vInit
  178         
C166 COMPILER V7.05, MAIN                                                                  11/28/2013 14:13:50 PAGE 4   

  179         
  180         //****************************************************************************
  181         // @Function      void MAIN_vUnlockProtecReg(void) 
  182         //
  183         //----------------------------------------------------------------------------
  184         // @Description   This function makes it possible to write one protected 
  185         //                register.
  186         //
  187         //----------------------------------------------------------------------------
  188         // @Returnvalue   None
  189         //
  190         //----------------------------------------------------------------------------
  191         // @Parameters    None
  192         //
  193         //----------------------------------------------------------------------------
  194         // @Date          28.11.2013
  195         //
  196         //****************************************************************************
  197         
  198         // USER CODE BEGIN (UnlockProtecReg,1)
  199         
  200         // USER CODE END
  201         
  202         void MAIN_vUnlockProtecReg(void)
  203         {
  204  1        uword uwPASSWORD;
  205  1      
  206  1          SCU_SLC = 0xAAAA;                   // command 0
  207  1          SCU_SLC = 0x5554;                   // command 1
  208  1      
  209  1          uwPASSWORD = SCU_SLS & 0x00FF;
  210  1          uwPASSWORD = (~uwPASSWORD) & 0x00FF;
  211  1      
  212  1          SCU_SLC = 0x9600 | uwPASSWORD;      // command 2
  213  1          SCU_SLC = 0x0000;                   // command 3
  214  1      
  215  1      } //  End of function MAIN_vUnlockProtecReg
  216         
  217         
  218         //****************************************************************************
  219         // @Function      void MAIN_vLockProtecReg(void) 
  220         //
  221         //----------------------------------------------------------------------------
  222         // @Description   This function makes it possible to lock one protected 
  223         //                register.
  224         //
  225         //----------------------------------------------------------------------------
  226         // @Returnvalue   None
  227         //
  228         //----------------------------------------------------------------------------
  229         // @Parameters    None
  230         //
  231         //----------------------------------------------------------------------------
  232         // @Date          28.11.2013
  233         //
  234         //****************************************************************************
  235         
  236         // USER CODE BEGIN (LockProtecReg,1)
  237         
  238         // USER CODE END
  239         
  240         void MAIN_vLockProtecReg(void)
C166 COMPILER V7.05, MAIN                                                                  11/28/2013 14:13:50 PAGE 5   

  241         {
  242  1        uword uwPASSWORD;
  243  1      
  244  1          SCU_SLC = 0xAAAA;                   // command 0
  245  1          SCU_SLC = 0x5554;                   // command 1
  246  1      
  247  1          uwPASSWORD = SCU_SLS & 0x00FF;
  248  1          uwPASSWORD = (~uwPASSWORD) & 0x00FF;
  249  1      
  250  1          SCU_SLC = 0x9600 | uwPASSWORD;      // command 2
  251  1          SCU_SLC = 0x1800;                   // command 3; new PASSWOR is 0x00
  252  1      
  253  1          uwPASSWORD = SCU_SLS & 0x00FF;
  254  1          uwPASSWORD = (~uwPASSWORD) & 0x00FF;
  255  1          SCU_SLC = 0x8E00 | uwPASSWORD;      // command 4
  256  1      
  257  1      } //  End of function MAIN_vLockProtecReg
  258         
  259         
  260         //****************************************************************************
  261         // @Function      void MAIN_vChangeFreq(void) 
  262         //
  263         //----------------------------------------------------------------------------
  264         // @Description   This function is used to select the external crystal and
  265         //                configure the system frequency to 80Mhz/66Mhz.
  266         //
  267         //----------------------------------------------------------------------------
  268         // @Returnvalue   None
  269         //
  270         //----------------------------------------------------------------------------
  271         // @Parameters    None
  272         //
  273         //----------------------------------------------------------------------------
  274         // @Date          28.11.2013
  275         //
  276         //****************************************************************************
  277         
  278         // USER CODE BEGIN (ChangeFreq,1)
  279         
  280         // USER CODE END
  281         
  282         void MAIN_vChangeFreq(void)
  283         {
  284  1        SCS_SwitchToHighPrecBandgap();
  285  1      
  286  1        //For application and internal application resets, the complete PLL configuration could be avoided
  287  1        //The entry from application resets and internal application reset is covered in the following different
             -iation
  288  1        //in int/ext clock in lock/unlocked state.
  289  1      
  290  1        if  ((SCU_PLLSTAT & 0x0004) == 0x0004)             // fR derived from Internal clock
  291  1              {
  292  2                  //Normal startup state during boot and the clock
  293  2                  //has to be in the next step configured on the external crystal
  294  2                  //use XTAL/VCO, count XTAL clock
  295  2      
  296  2                  SCS_StartXtalOsc(1);                     // Starts the crystal oscillator
  297  2                  SCS_SwitchSystemClock(1);                // System clock is increased to target speed (80/66 M
             -Hz)
  298  2      
  299  2              }
  300  1      
C166 COMPILER V7.05, MAIN                                                                  11/28/2013 14:13:50 PAGE 6   

  301  1        else                                               // fR derived from external crystal clock
  302  1              {
  303  2                  if ((SCU_PLLSTAT & 0x1009) == 0x1009)    // fR derived from external crystal clock + VCO is lo
             -cked
  304  2                  {
  305  3                     //usually after an application reset where clock need not be configured again.
  306  3                     //check K2/P/N values and decide whether these values have to be adapted based on applicati
             -on needs.
  307  3                     NOP();
  308  3                     //usually the PLL losss of Lock TRAP schould be enabled here.
  309  3                  }
  310  2                  else                                     //fR derived from external crystal clock + VCO is not
             - locked
  311  2      
  312  2                  {
  313  3                     //estimate the K1 value and the current frequency
  314  3                     //reduce K2/P/N values in steps so that the frequency
  315  3                     //jumps is limited to 20MHz or factor of 5 whichever is minimum
  316  3                     NOP();
  317  3                  }
  318  2      
  319  2      
  320  2              }
  321  1      
  322  1      } //  End of function MAIN_vChangeFreq
  323         
  324         
  325         //****************************************************************************
  326         // @Function      void main(void) 
  327         //
  328         //----------------------------------------------------------------------------
  329         // @Description   This is the main function.
  330         //
  331         //----------------------------------------------------------------------------
  332         // @Returnvalue   None
  333         //
  334         //----------------------------------------------------------------------------
  335         // @Parameters    None
  336         //
  337         //----------------------------------------------------------------------------
  338         // @Date          28.11.2013
  339         //
  340         //****************************************************************************
  341         
  342         // USER CODE BEGIN (Main,1)
  343         
  344         // USER CODE END
  345         
  346         void main(void)
  347         {
  348  1        // USER CODE BEGIN (Main,2)
  349  1        // calculation variables
  350  1        volatile unsigned char gyro_x = 0;
  351  1        volatile unsigned char gyro_y = 0;
  352  1        volatile unsigned char gyro_z = 0;
  353  1        volatile unsigned char accel_x = 0;
  354  1        volatile unsigned char accel_y = 0;
  355  1        volatile unsigned char accel_z = 0;
  356  1        // USER CODE END
  357  1      
  358  1        MAIN_vInit();
  359  1      
C166 COMPILER V7.05, MAIN                                                                  11/28/2013 14:13:50 PAGE 7   

  360  1        // USER CODE BEGIN (Main,3)
  361  1      
  362  1        // USER CODE END
  363  1      
  364  1        while(1)
  365  1        {
  366  2      
  367  2         // USER CODE BEGIN (Main,4)
  368  2         while(0 == timerevent);
  369  2         timerevent = 0;
  370  2         
  371  2         // read ALL! the ADC channels
  372  2         //5,6,7 for gyro     sensor
  373  2         //13,14,15 for acceleration sensor
  374  2         ADC0_vStartSeq0ReqChNum(0, 0, 0, ADC0_ANA_5);
  375  2         ADC0_vStartSeq2ReqChNum(0, 0, 0, ADC0_ANA_13);
  376  2         while(!ADC0_uwResultValid(RESULT_REG_0) && !ADC0_uwResultValid(RESULT_REG_3)); // necessary?
  377  2         ADC0_vStartSeq0ReqChNum(0, 0, 0, ADC0_ANA_6);
  378  2         ADC0_vStartSeq2ReqChNum(0, 0, 0, ADC0_ANA_14);
  379  2         while(!ADC0_uwResultValid(RESULT_REG_1) && !ADC0_uwResultValid(RESULT_REG_4)); // necessary?
  380  2         ADC0_vStartSeq0ReqChNum(0, 0, 0, ADC0_ANA_7);
  381  2         ADC0_vStartSeq2ReqChNum(0, 0, 0, ADC0_ANA_15);  
  382  2         while(!ADC0_uwResultValid(RESULT_REG_2) && !ADC0_uwResultValid(RESULT_REG_5)); // necessary?
  383  2      
  384  2         gyro_x = ADC0_uwGetResultData(RESULT_REG_0);
  385  2         gyro_y = ADC0_uwGetResultData(RESULT_REG_1);
  386  2         gyro_z = ADC0_uwGetResultData(RESULT_REG_2);
  387  2         accel_x = ADC0_uwGetResultData(RESULT_REG_3);
  388  2         accel_y = ADC0_uwGetResultData(RESULT_REG_4);
  389  2         accel_z = ADC0_uwGetResultData(RESULT_REG_5);
  390  2         // do some kind of stuff
  391  2      
  392  2         // set motor speed
  393  2         //SetMotorSpeedsNoReturn(links_p, rechts_p);
  394  2         SetMotorSpeedsNoReturn(0, 0);
  395  2         // USER CODE END
  396  2      
  397  2        }
  398  1      
  399  1      } //  End of function main
  400         
  401         
  402         
  403         // USER CODE BEGIN (MAIN_General,10)
  404         
  405         // USER CODE END
  406         


MODULE INFORMATION:   INITIALIZED  UNINITIALIZED
  CODE SIZE        =         530     --------
  NEAR-CONST SIZE  =    --------     --------
  FAR-CONST SIZE   =    --------     --------
  HUGE-CONST SIZE  =    --------     --------
  XHUGE-CONST SIZE =    --------     --------
  NEAR-DATA SIZE   =           1     --------
  FAR-DATA SIZE    =    --------     --------
  XHUGE-DATA SIZE  =    --------     --------
  IDATA-DATA SIZE  =    --------     --------
  SDATA-DATA SIZE  =    --------     --------
  BDATA-DATA SIZE  =    --------     --------
  HUGE-DATA SIZE   =    --------     --------
C166 COMPILER V7.05, MAIN                                                                  11/28/2013 14:13:50 PAGE 8   

  BIT SIZE         =    --------     --------
  INIT'L SIZE      =           6     --------
END OF MODULE INFORMATION.


C166 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
